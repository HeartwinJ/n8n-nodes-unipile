import type { INodeProperties } from 'n8n-workflow';

export const emailListFields: INodeProperties[] = [
	{
		displayName: 'Account ID',
		name: 'accountId',
		type: 'string',
		default: '',
		required: true,
		description: 'The ID of the account to use',
		routing: { send: { type: 'query', property: 'account_id' } },
		displayOptions: {
			show: {
				resource: ['email'],
				operation: ['emailList'],
			},
		},
	},
	{
		displayName: 'Additional Fields',
		name: 'additionalFields',
		type: 'collection',
		placeholder: 'Add Field',
		default: {},
		options: [
			{
				displayName: 'After',
				name: 'after',
				type: 'dateTime',
				default: '',
				description: 'Return emails after this date/time',
				routing: { send: { type: 'query', property: 'after' } },
			},
			{
				displayName: 'Any Email',
				name: 'anyEmail',
				type: 'string',
				default: '',
				description: 'Filter by any matching email address (comma-separated)',
				routing: { send: { type: 'query', property: 'any_email' } },
			},
			{
				displayName: 'Before',
				name: 'before',
				type: 'dateTime',
				default: '',
				description: 'Return emails before this date/time',
				routing: { send: { type: 'query', property: 'before' } },
			},
			{
				displayName: 'Cursor',
				name: 'cursor',
				type: 'string',
				default: '',
				description: 'A cursor used for pagination',
				routing: { send: { type: 'query', property: 'cursor' } },
			},
			{
				displayName: 'Folder',
				name: 'folder',
				type: 'string',
				default: '',
				description: 'Filter emails by folder provider_id',
				routing: { send: { type: 'query', property: 'folder' } },
			},
			{
				displayName: 'From',
				name: 'from',
				type: 'string',
				default: '',
				description: 'Filter by sender email address',
				routing: { send: { type: 'query', property: 'from' } },
			},
			{
				displayName: 'Include Headers',
				name: 'includeHeaders',
				type: 'boolean',
				default: false,
				description: 'Whether to include email headers in the response',
				routing: { send: { type: 'query', property: 'include_headers' } },
			},
			{
				displayName: 'Limit',
				name: 'limit',
				type: 'number',
				default: 50,
				description: 'Max number of results to return',
				typeOptions: { minValue: 1 },
				routing: { send: { type: 'query', property: 'limit' } },
			},
			{
				displayName: 'Meta Only',
				name: 'metaOnly',
				type: 'boolean',
				default: false,
				description: 'Whether to return only metadata (omit large bodies)',
				routing: { send: { type: 'query', property: 'meta_only' } },
			},
			{
				displayName: 'Thread ID',
				name: 'threadId',
				type: 'string',
				default: '',
				description: 'Filter by email thread identifier',
				routing: { send: { type: 'query', property: 'thread_id' } },
			},
			{
				displayName: 'To',
				name: 'to',
				type: 'string',
				default: '',
				description: 'Filter by recipient email address',
				routing: { send: { type: 'query', property: 'to' } },
			},
		],
		displayOptions: {
			show: {
				resource: ['email'],
				operation: ['emailList'],
			},
		},
	},
];
