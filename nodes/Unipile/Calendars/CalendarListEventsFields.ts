import type { INodeProperties } from 'n8n-workflow';

export const calendarListEventsFields: INodeProperties[] = [
	{
		displayName: 'Calendar ID',
		name: 'calendarId',
		type: 'string',
		default: '',
		required: true,
		displayOptions: {
			show: {
				resource: ['calendar'],
				operation: ['calendarListEvents'],
			},
		},
	},
	{
		displayName: 'Account ID',
		name: 'accountId',
		type: 'string',
		default: '',
		required: true,
		routing: { send: { type: 'query', property: 'account_id' } },
		displayOptions: {
			show: {
				resource: ['calendar'],
				operation: ['calendarListEvents'],
			},
		},
	},
	{
		displayName: 'Additional Filters',
		name: 'additionalFields',
		type: 'collection',
		placeholder: 'Add Field',
		default: {},
		options: [
			{
				displayName: 'Attendees',
				name: 'attendees',
				type: 'string',
				default: '',
				description: 'Comma-separated list of attendee emails',
				routing: { send: { type: 'query', property: 'attendees' } },
			},
			{
				displayName: 'Busy',
				name: 'busy',
				type: 'boolean',
				default: false,
				description: 'Whether to filter for events with status busy',
				routing: { send: { type: 'query', property: 'busy' } },
			},
			{
				displayName: 'Cancelled',
				name: 'is_cancelled',
				type: 'boolean',
				default: false,
				description: 'Whether to retrieve cancelled events',
				routing: { send: { type: 'query', property: 'is_cancelled' } },
			},
			{
				displayName: 'Cursor',
				name: 'cursor',
				type: 'string',
				default: '',
				description: 'Pagination cursor',
				routing: { send: { type: 'query', property: 'cursor' } },
			},
			{
				displayName: 'Description',
				name: 'description',
				type: 'string',
				default: '',
				description: 'Filter by description',
				routing: { send: { type: 'query', property: 'description' } },
			},
			{
				displayName: 'End',
				name: 'end',
				type: 'string',
				default: '',
				description: 'Filter events ending before this date',
				routing: { send: { type: 'query', property: 'end' } },
			},
			{
				displayName: 'Event Type',
				name: 'event_type',
				type: 'string',
				default: '',
				description: 'Comma-separated list of event types',
				routing: { send: { type: 'query', property: 'event_type' } },
			},
			{
				displayName: 'Expand Recurring',
				name: 'expand_recurring',
				type: 'boolean',
				default: false,
				description: 'Whether to expand recurring events (single or occurrence)',
				routing: { send: { type: 'query', property: 'expand_recurring' } },
			},
			{
				displayName: 'iCal UID',
				name: 'ical_uid',
				type: 'string',
				default: '',
				description: 'Filter by iCal UID',
				routing: { send: { type: 'query', property: 'ical_uid' } },
			},
			{
				displayName: 'Limit',
				name: 'limit',
				type: 'number',
				default: 50,
				description: 'Max number of results to return',
				typeOptions: { minValue: 1 },
				routing: { send: { type: 'query', property: 'limit' } },
			},
			{
				displayName: 'Location',
				name: 'location',
				type: 'string',
				default: '',
				description: 'Filter by location',
				routing: { send: { type: 'query', property: 'location' } },
			},
			{
				displayName: 'Offset',
				name: 'offset',
				type: 'number',
				default: 0,
				description: 'Pagination offset',
				routing: { send: { type: 'query', property: 'offset' } },
			},
			{
				displayName: 'Start',
				name: 'start',
				type: 'string',
				default: '',
				description: 'Filter events starting after this date',
				routing: { send: { type: 'query', property: 'start' } },
			},
			{
				displayName: 'Title',
				name: 'title',
				type: 'string',
				default: '',
				description: 'Filter by title',
				routing: { send: { type: 'query', property: 'title' } },
			},
			{
				displayName: 'Updated After',
				name: 'updated_after',
				type: 'string',
				default: '',
				description: 'Filter events updated after this date',
				routing: { send: { type: 'query', property: 'updated_after' } },
			},
			{
				displayName: 'Updated Before',
				name: 'updated_before',
				type: 'string',
				default: '',
				description: 'Filter events updated before this date',
				routing: { send: { type: 'query', property: 'updated_before' } },
			},
		],
		displayOptions: {
			show: {
				resource: ['calendar'],
				operation: ['calendarListEvents'],
			},
		},
	},
];
